// TODO: Insert description here. (generated by dbrazdil)

#include <cstdlib>
#include <cstdio>
#include <string>

#include "minsfi.h"
#include <gtest/gtest.h>

extern "C" {
  int allow_read_access(const char *filename);
  int sandboxed_open(sb_ptr_t sb_filename, int flags, int mode);
}

//static inline sb_ptr_t convert_pointer(const void *ptr) {
//  uintptr_t ptr_num = (uintptr_t) ptr;
//  assert(ptr_num > __sfi_memory_base);
//  return (sb_ptr_t) (ptr_num - __sfi_memory_base);
//}

namespace {

  class SystemIOTest : public ::testing::Test {
   protected:
    const char *zipfile1, *zipfile2;

    SystemIOTest() {
      zipfile1 = "myfile.zip";
      zipfile2 = "yourfile.zip";
    }

    virtual ~SystemIOTest() { }

    virtual void SetUp() { }

    virtual void TearDown() {
    }
  };

  TEST_F(SystemIOTest, ReadUninitialized) {
    ASSERT_FALSE(allow_read_access(zipfile1));
  }

  TEST_F(SystemIOTest, ReadNULL) {
    const char *argv[] = { "foo", zipfile1 };
    init_system_io(2, argv);

    ASSERT_FALSE(allow_read_access(NULL));
  }

  TEST_F(SystemIOTest, ReadAllowed) {
    const char *argv[] = { "foo", zipfile1 };
    init_system_io(2, argv);

    ASSERT_TRUE(allow_read_access(zipfile1));
  }

  TEST_F(SystemIOTest, ReadForbidden) {
    const char *argv[] = { "foo", zipfile1 };
    init_system_io(2, argv);

    ASSERT_FALSE(allow_read_access(zipfile2));
  }
}
